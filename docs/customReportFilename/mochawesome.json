{
  "stats": {
    "suites": 3,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-16T14:14:59.024Z",
    "end": "2019-07-16T14:14:59.039Z",
    "duration": 15,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "52a4232f-3b0c-4b92-8113-2318284b56ce",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7be88a8-6404-4365-91fa-304464ab3c04",
          "title": "列表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\list.spec.js",
          "file": "\\tests\\util\\list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "append 函数测试",
              "fullTitle": "列表基本功能测试 append 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 2);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), 1);\nassert.equal(list.size, 3);\nassert.equal(list.toString(), '1,2,3');\ndone();",
              "err": {},
              "uuid": "14db3493-2027-4124-9fb0-0f07a38ba369",
              "parentUUID": "f7be88a8-6404-4365-91fa-304464ab3c04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove 函数测试",
              "fullTitle": "列表基本功能测试 remove 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2)\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), -1);\nassert.equal(list.size, 2);\nassert.equal(list.toString(), '1,3');\nassert.equal(list.remove(4), false);\nassert.equal(list.toString(), '1,3');\ndone();",
              "err": {},
              "uuid": "9551472a-61c3-4ff0-9d6e-43af41c122ac",
              "parentUUID": "f7be88a8-6404-4365-91fa-304464ab3c04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clear 函数测试",
              "fullTitle": "列表基本功能测试 clear 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.clear();\nassert.equal(list.size, 0);\nassert.equal(list.toString(), '');\ndone();",
              "err": {},
              "uuid": "bd5209c7-935b-4fda-b3cd-6cc08baaf72a",
              "parentUUID": "f7be88a8-6404-4365-91fa-304464ab3c04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "insert 函数测试",
              "fullTitle": "列表基本功能测试 insert 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.insert(2, 4);\nassert.equal(list.size, 4);\nassert.equal(list.toString(), '1,2,4,3');\ndone();",
              "err": {},
              "uuid": "5328d2b1-8a5b-42fc-9a98-9baebd0a60be",
              "parentUUID": "f7be88a8-6404-4365-91fa-304464ab3c04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "prev next 函数测试",
              "fullTitle": "列表基本功能测试 prev next 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.next();\nassert.equal(list.getElement(), 3);\nlist.front();\nassert.equal(list.getElement(), 1);\nlist.end();\nassert.equal(list.getElement(), 4);\nlist.prev();\nassert.equal(list.getElement(), 3);\ndone();",
              "err": {},
              "uuid": "f56a7322-e1e4-4d91-a1f7-41cbc21f3e69",
              "parentUUID": "f7be88a8-6404-4365-91fa-304464ab3c04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "moveTo 函数测试",
              "fullTitle": "列表基本功能测试 moveTo 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.moveTo(4);\nassert.equal(list.getElement(), 4);\nlist.moveTo(1);\nassert.equal(list.getElement(), 2);\ndone();",
              "err": {},
              "uuid": "697e7ddb-a90c-48fb-81d7-5ef77d8fdfaf",
              "parentUUID": "f7be88a8-6404-4365-91fa-304464ab3c04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14db3493-2027-4124-9fb0-0f07a38ba369",
            "9551472a-61c3-4ff0-9d6e-43af41c122ac",
            "bd5209c7-935b-4fda-b3cd-6cc08baaf72a",
            "5328d2b1-8a5b-42fc-9a98-9baebd0a60be",
            "f56a7322-e1e4-4d91-a1f7-41cbc21f3e69",
            "697e7ddb-a90c-48fb-81d7-5ef77d8fdfaf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b5d5e28-523e-4e8e-a8fa-82ff8c580dd6",
          "title": "栈基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\stack.spec.js",
          "file": "\\tests\\util\\stack.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "栈基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stack = new Stack();\nstack.push(1);\nassert.equal(stack.top, 1);\nstack.push(2);\nassert.equal(stack.top, 2);\nstack.push(3);\nassert.equal(stack.top, 3);\nstack.push(4);\nassert.equal(stack.top, 4);\nassert.equal(stack.peek(), 4);\nstack.pop();\nassert.equal(stack.top, 3);\nassert.equal(stack.peek(), 3);\nstack.pop();\nassert.equal(stack.top, 2);\nassert.equal(stack.peek(), 2);\nstack.clear();\nstack.push(3);\nassert.equal(stack.top, 1);\nassert.equal(stack.peek(), 3);\ndone();",
              "err": {},
              "uuid": "ceeef5d7-554c-4839-b4ad-243147e5ef8f",
              "parentUUID": "7b5d5e28-523e-4e8e-a8fa-82ff8c580dd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ceeef5d7-554c-4839-b4ad-243147e5ef8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd2a1359-47d9-44d2-aded-8e5c42d0b670",
          "title": "队列基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\queue.spec.js",
          "file": "\\tests\\util\\queue.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "队列基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queue = new Queue();\nassert.equal(queue.empty(), true);\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nassert.equal(queue.toString(), \n`1\n2\n3`);\nqueue.dequeue();\nassert.equal(queue.toString(), \n`2\n3`);\nassert.equal(queue.length, 2) \nqueue.enqueue(5);\nassert.equal(queue.front(), 2);\nassert.equal(queue.toString(), \n`2\n3\n5`);\nassert.equal(queue.back(), 5);\nassert.equal(queue.empty(), false);\ndone();",
              "err": {},
              "uuid": "aa1dae6d-e33b-4964-9e47-1f1a94d407fe",
              "parentUUID": "fd2a1359-47d9-44d2-aded-8e5c42d0b670",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa1dae6d-e33b-4964-9e47-1f1a94d407fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.1.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "./docs/customReportFilename"
      },
      "version": "4.0.1"
    }
  }
}