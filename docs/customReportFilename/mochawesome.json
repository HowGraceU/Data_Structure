{
  "stats": {
    "suites": 9,
    "tests": 38,
    "passes": 35,
    "pending": 0,
    "failures": 3,
    "start": "2019-07-23T14:52:30.497Z",
    "end": "2019-07-23T14:52:36.172Z",
    "duration": 5675,
    "testsRegistered": 38,
    "passPercent": 92.10526315789474,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cba17a9f-34a4-4889-a6cf-7c67a62f6969",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "31d777dc-885a-4b29-b398-bc2102528f6b",
          "title": "列表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\list.spec.js",
          "file": "\\tests\\util\\list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "append 函数测试",
              "fullTitle": "列表基本功能测试 append 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nassert.equal(list.currPos, 0);\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.currPos, 1);\nassert.equal(list.getElement(), 2);\nlist.next()\nassert.equal(list.currPos, 2);\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), 1);\nassert.equal(list.length, 3);\nassert.equal(list.toString(), '1,2,3');\ndone();",
              "err": {},
              "uuid": "3b6b4ac3-3eea-4dd4-be95-7af97fbdfa8a",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove 函数测试",
              "fullTitle": "列表基本功能测试 remove 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2)\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), -1);\nassert.equal(list.length, 2);\nassert.equal(list.toString(), '1,3');\nassert.equal(list.remove(4), false);\nassert.equal(list.toString(), '1,3');\ndone();",
              "err": {},
              "uuid": "baf8db69-1ed3-490c-a7f2-888263779a4d",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clear 函数测试",
              "fullTitle": "列表基本功能测试 clear 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.clear();\nassert.equal(list.length, 0);\nassert.equal(list.toString(), '');\ndone();",
              "err": {},
              "uuid": "3c5c25bc-9b75-4b21-848e-7dfea993bbce",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "insert 函数测试",
              "fullTitle": "列表基本功能测试 insert 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.insert(2, 4);\nlist.insert(4, 5);\nlist.insert(6, 7);\nassert.equal(list.length, 5);\nassert.equal(list.toString(), '1,2,4,5,3');\ndone();",
              "err": {},
              "uuid": "eeaecf59-637a-40b0-8ac2-0dab267303eb",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "prev next 函数测试",
              "fullTitle": "列表基本功能测试 prev next 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.next();\nassert.equal(list.getElement(), 3);\nlist.front();\nassert.equal(list.getElement(), 1);\nlist.end();\nassert.equal(list.getElement(), 4);\nlist.prev();\nassert.equal(list.getElement(), 3);\ndone();",
              "err": {},
              "uuid": "d0b8d619-7f40-4030-9659-b476520b3d35",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "moveTo 函数测试",
              "fullTitle": "列表基本功能测试 moveTo 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.moveTo(4);\nassert.equal(list.getElement(), 4);\nlist.moveTo(1);\nassert.equal(list.getElement(), 2);\ndone();",
              "err": {},
              "uuid": "d860c1af-8b9e-4d6f-a33b-660f35258866",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains 函数测试",
              "fullTitle": "列表基本功能测试 contains 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nassert.equal(list.contains(2), true);\nassert.equal(list.contains(4), true);\nassert.equal(list.contains(6), false);\ndone();",
              "err": {},
              "uuid": "898ef704-cb29-4855-aaa0-b50b5e2e0f41",
              "parentUUID": "31d777dc-885a-4b29-b398-bc2102528f6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b6b4ac3-3eea-4dd4-be95-7af97fbdfa8a",
            "baf8db69-1ed3-490c-a7f2-888263779a4d",
            "3c5c25bc-9b75-4b21-848e-7dfea993bbce",
            "eeaecf59-637a-40b0-8ac2-0dab267303eb",
            "d0b8d619-7f40-4030-9659-b476520b3d35",
            "d860c1af-8b9e-4d6f-a33b-660f35258866",
            "898ef704-cb29-4855-aaa0-b50b5e2e0f41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1c9f19f8-edd2-48ee-b5a0-951b2a7c847e",
          "title": "栈基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\stack.spec.js",
          "file": "\\tests\\util\\stack.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "栈基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stack = new Stack();\nstack.push(1);\nassert.equal(stack.top, 1);\nstack.push(2);\nassert.equal(stack.top, 2);\nstack.push(3);\nassert.equal(stack.top, 3);\nstack.push(4);\nassert.equal(stack.top, 4);\nassert.equal(stack.peek(), 4);\nstack.pop();\nassert.equal(stack.top, 3);\nassert.equal(stack.peek(), 3);\nstack.pop();\nassert.equal(stack.top, 2);\nassert.equal(stack.peek(), 2);\nstack.clear();\nstack.push(3);\nassert.equal(stack.top, 1);\nassert.equal(stack.peek(), 3);\ndone();",
              "err": {},
              "uuid": "29ae57c2-be02-4f29-9058-2115b239b4b2",
              "parentUUID": "1c9f19f8-edd2-48ee-b5a0-951b2a7c847e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29ae57c2-be02-4f29-9058-2115b239b4b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53fe40c1-5983-4367-bd3d-ca067be45d8e",
          "title": "队列基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\queue.spec.js",
          "file": "\\tests\\util\\queue.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "队列基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queue = new Queue();\nassert.equal(queue.empty(), true);\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nassert.equal(queue.toString(), \n`1\n2\n3`);\nqueue.dequeue();\nassert.equal(queue.toString(), \n`2\n3`);\nassert.equal(queue.length, 2) \nqueue.enqueue(5);\nassert.equal(queue.front(), 2);\nassert.equal(queue.toString(), \n`2\n3\n5`);\nassert.equal(queue.back(), 5);\nassert.equal(queue.empty(), false);\ndone();",
              "err": {},
              "uuid": "54a1a0fd-822c-4012-9697-ca50a3870b75",
              "parentUUID": "53fe40c1-5983-4367-bd3d-ca067be45d8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54a1a0fd-822c-4012-9697-ca50a3870b75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "77510140-8eaa-4fcd-a13a-265508d604a9",
          "title": "链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\listNode.spec.js",
          "file": "\\tests\\util\\listNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nassert.equal(listNode.display(), '1 => 2 => 3 => 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 3 => 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 4');\ndone();",
              "err": {},
              "uuid": "0f07a069-37c0-4ae0-adc9-32db9ed12d71",
              "parentUUID": "77510140-8eaa-4fcd-a13a-265508d604a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f07a069-37c0-4ae0-adc9-32db9ed12d71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bfb9629b-a0b2-4c95-8fdc-4c95682dac34",
          "title": "双向链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\doubleListNode.spec.js",
          "file": "\\tests\\util\\doubleListNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "双向链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 <=> 2 <=> 3 <=> 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 3 <=> 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 4');\nassert.equal(listNode.findNext(2), node2_5);\nassert.equal(listNode.findNext(4), null);\nassert.equal(listNode.findNext(5), false);\ndone();",
              "err": {},
              "uuid": "418e6c08-8826-466d-9034-77ec223d35fc",
              "parentUUID": "bfb9629b-a0b2-4c95-8fdc-4c95682dac34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "418e6c08-8826-466d-9034-77ec223d35fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "05139b9b-117d-4abf-8519-53bee91691c3",
          "title": "集合基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\set.spec.js",
          "file": "\\tests\\util\\set.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "集合基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const set1 = new Gather([1, 2, 3, 4, 4]);\nconst set2 = new Gather([2, 4, 6, 7]);\nassert.equal(set1.display(), '1,2,3,4');\nlet intersect = Gather.intersect(set1, set2);\nassert.equal(intersect.display(), '2,4');\nlet union = Gather.union(set1, set2);\nassert.equal(union.display(), '1,2,3,4,6,7');\nlet complementary = Gather.complementary(set1, new Gather([1, 2, 3, 4, 5, 6]));\nassert.equal(complementary.display(), '5,6');\nlet difference = Gather.difference(set1, set2);\nassert.equal(difference.display(), '1,3,6,7');\ndone();",
              "err": {},
              "uuid": "c3a2c4f6-c74c-4480-8f0a-636ed897cdaa",
              "parentUUID": "05139b9b-117d-4abf-8519-53bee91691c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3a2c4f6-c74c-4480-8f0a-636ed897cdaa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ace56da0-4228-46e5-9485-6eaf443e60d0",
          "title": "二叉树基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\BST.spec.js",
          "file": "\\tests\\util\\BST.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "二叉树基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bst = new BST(50);\nconst node_25 = bst.insert(25);\nbst.insert(15);\nbst.insert(30);\nbst.insert(30);\nbst.insert(35);\nbst.insert(32);\nbst.insert(34);\nconst node_55 = bst.insert(55);\nbst.insert(53);\nbst.insert(54);\nbst.insert(75);\nbst.insert(67);\nbst.insert(70);\nassert.equal(bst.inOrder(), '15,25,30,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.find(50), bst.root);\nassert.equal(bst.find(25), node_25);\nassert.equal(bst.find(55), node_55);\nassert.equal(bst.find(72), false);\nassert.equal(bst.getMin().show(), 15);\nassert.equal(bst.getMax().show(), 75);\nbst.remove(15);\nassert.equal(bst.inOrder(), '25,30,32,34,35,50,53,54,55,67,70,75');\nbst.remove(30);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.remove(58), false);\nbst.remove(55);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,67,70,75');\nbst.remove(35);\nassert.equal(bst.inOrder(), '25,32,34,50,53,54,67,70,75');\nbst.remove(50);\nassert.equal(bst.inOrder(), '25,32,34,53,54,67,70,75');\ndone();",
              "err": {
                "message": "AssertionError [ERR_ASSERTION]: 'heap() {\\r\\n\\t\\tlet current = this.root;\\r\\n\\t\\tlet order = [];\\r\\n\\t\\tlet res = [];\\r\\n\\r\\n\\t\\twhile (order.length || current) {\\r\\n\\t\\t\\tif (current) {\\r\\n\\t\\t\\t\\torder.push(current);\\r\\n\\t\\t\\t\\tcurrent = current.left;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tcurrent = order.pop();\\r\\n\\t\\t\\t\\tres.push(current.data);\\r\\n\\t\\t\\t\\tcurrent = current.right;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn res;\\r\\n\\t}' == '15,25,30,32,34,35,50,53,54,55,67,70,75'",
                "estack": "AssertionError [ERR_ASSERTION]: 'heap() {\\r\\n\\t\\tlet current = this.root;\\r\\n\\t\\tlet order = [];\\r\\n\\t\\tlet res = [];\\r\\n\\r\\n\\t\\twhile (order.length || current) {\\r\\n\\t\\t\\tif (current) {\\r\\n\\t\\t\\t\\torder.push(current);\\r\\n\\t\\t\\t\\tcurrent = current.left;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tcurrent = order.pop();\\r\\n\\t\\t\\t\\tres.push(current.data);\\r\\n\\t\\t\\t\\tcurrent = current.right;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn res;\\r\\n\\t}' == '15,25,30,32,34,35,50,53,54,55,67,70,75'\n    at Context.done (tests\\util\\BST.spec.js:25:10)\n    at processImmediate (internal/timers.js:443:21)",
                "diff": "- heap() {\r\n- \t\tlet current = this.root;\r\n- \t\tlet order = [];\r\n- \t\tlet res = [];\r\n- \r\n- \t\twhile (order.length || current) {\r\n- \t\t\tif (current) {\r\n- \t\t\t\torder.push(current);\r\n- \t\t\t\tcurrent = current.left;\r\n- \t\t\t} else {\r\n- \t\t\t\tcurrent = order.pop();\r\n- \t\t\t\tres.push(current.data);\r\n- \t\t\t\tcurrent = current.right;\r\n- \t\t\t}\r\n- \t\t}\r\n- \r\n- \t\treturn res;\r\n- \t}\n+ 15,25,30,32,34,35,50,53,54,55,67,70,75\n"
              },
              "uuid": "76beaac5-f157-40ad-a537-ff9bf95ba857",
              "parentUUID": "ace56da0-4228-46e5-9485-6eaf443e60d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "76beaac5-f157-40ad-a537-ff9bf95ba857"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87cf949d-e63c-45d5-8706-29a90ae4bb48",
          "title": "图基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\graph.spec.js",
          "file": "\\tests\\util\\graph.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "图基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const graph = new Graph(7);\ngraph.addEdge(0, 1);\ngraph.addEdge(0, 2);\ngraph.addEdge(0, 3);\ngraph.addEdge(1, 4);\ngraph.addEdge(2, 5);\ngraph.addEdge(4, 6);\nlet edgs = [\n\t[1, 2, 3],\n\t[0, 4],\n\t[0, 5],\n\t[0],\n\t[1, 6],\n\t[2],\n\t[4]\n]\nconsole.log(edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.showGraph(), edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.dfs(0), '0,1,4,6,2,5,3');\t\t\nassert.equal(graph.bfs(0), '0,1,2,3,4,5,6');\ndone();",
              "err": {},
              "uuid": "a5ac6150-833d-4ec0-8ae4-ff5015b2ebbb",
              "parentUUID": "87cf949d-e63c-45d5-8706-29a90ae4bb48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5ac6150-833d-4ec0-8ae4-ff5015b2ebbb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
          "title": "排序算法测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\sort.spec.js",
          "file": "\\tests\\util\\sort.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "随机数组基本功能测试",
              "fullTitle": "排序算法测试 随机数组基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let arr = new randomArr(100);\nassert.equal(arr.length, 100);\nlet allNum = arr.every(item => {\n\treturn typeof item === 'number' && 0 < item && item < 1000;\n});\nassert.equal(allNum, true);\ndone();",
              "err": {
                "message": "AssertionError [ERR_ASSERTION]: false == true",
                "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.done (tests\\util\\sort.spec.js:17:10)\n    at processImmediate (internal/timers.js:443:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "5891a361-dde1-43b5-bb4a-4f35b9d035fb",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "原生排序100个时间测试",
              "fullTitle": "排序算法测试 原生排序100个时间测试",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).sort((a, b) => a - b);\n}\ndone();",
              "err": {},
              "uuid": "64e304ce-c05e-4528-8a5d-6abdd56ea1fe",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "原生排序1000个时间测试",
              "fullTitle": "排序算法测试 原生排序1000个时间测试",
              "timedOut": false,
              "duration": 345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).sort((a, b) => a - b);\n}\ndone();",
              "err": {},
              "uuid": "40a9a240-b252-43eb-8f18-9d108f744482",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序基本功能测试",
              "fullTitle": "排序算法测试 冒泡排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.bubble();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "ac2ce64d-1e0c-4f2a-be89-4baefbfecb4a",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序100个时间测试",
              "fullTitle": "排序算法测试 冒泡排序100个时间测试",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).bubble();\n}\ndone();",
              "err": {},
              "uuid": "f1fa9958-e244-48e1-806b-9b07b9c82ed3",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序1000个时间测试",
              "fullTitle": "排序算法测试 冒泡排序1000个时间测试",
              "timedOut": false,
              "duration": 1485,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).bubble();\n}\ndone();",
              "err": {},
              "uuid": "1af0d320-33b9-4bff-a676-9be74df0b3c8",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序基本功能测试",
              "fullTitle": "排序算法测试 选择排序基本功能测试",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.selection();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "99f57235-d799-4bc4-8700-c0bd1dfcbd6d",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序100个时间测试",
              "fullTitle": "排序算法测试 选择排序100个时间测试",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).selection();\n}\ndone();",
              "err": {},
              "uuid": "1586754c-c062-48d5-87b5-38223982c426",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序1000个时间测试",
              "fullTitle": "排序算法测试 选择排序1000个时间测试",
              "timedOut": false,
              "duration": 698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).selection();\n}\ndone();",
              "err": {},
              "uuid": "a5be0fbb-1ba7-47e4-b814-e84160caf05e",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序基本功能测试",
              "fullTitle": "排序算法测试 插入排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.insertion();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "058d0c70-cc95-47f8-a491-383b65f5b86c",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序100个时间测试",
              "fullTitle": "排序算法测试 插入排序100个时间测试",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).insertion();\n}\ndone();",
              "err": {},
              "uuid": "ea92e867-faba-4989-ac38-019e8057ca33",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序1000个时间测试",
              "fullTitle": "排序算法测试 插入排序1000个时间测试",
              "timedOut": false,
              "duration": 472,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).insertion();\n}\ndone();",
              "err": {},
              "uuid": "f4f0c921-fa1a-4e59-b89d-d97c7cbbcc14",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序基本功能测试",
              "fullTitle": "排序算法测试 希尔排序基本功能测试",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.shell();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "78d6fbde-aac7-4ae6-9f34-efe63c1c315a",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序100个时间测试",
              "fullTitle": "排序算法测试 希尔排序100个时间测试",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).shell();\n}\ndone();",
              "err": {},
              "uuid": "9fc7d6de-087f-4688-98e3-1803f27cc822",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序1000个时间测试",
              "fullTitle": "排序算法测试 希尔排序1000个时间测试",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).shell();\n}\ndone();",
              "err": {},
              "uuid": "8baaca0c-6c69-4210-bb40-bf7c57e6072c",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序基本功能测试",
              "fullTitle": "排序算法测试 归并排序基本功能测试",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr = arr.merge();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "b53e7ad9-2fe7-487a-88cb-52daf91082aa",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序100个时间测试",
              "fullTitle": "排序算法测试 归并排序100个时间测试",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(100).merge();\n}\ndone();",
              "err": {},
              "uuid": "a72034d7-64f5-4092-89d7-bd88686432e6",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序1000个时间测试",
              "fullTitle": "排序算法测试 归并排序1000个时间测试",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 100;\nwhile (count--) {\n\tnew randomArr(1000).merge();\n}\ndone();",
              "err": {},
              "uuid": "10379ae9-5063-46b7-88dc-7a3125c09aa9",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "快速排序基本功能测试",
              "fullTitle": "排序算法测试 快速排序基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.quick();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "55b8ea12-315a-49e1-8506-4da426ef493e",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "快速排序100个时间测试",
              "fullTitle": "排序算法测试 快速排序100个时间测试",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).quick();\n}\ndone();",
              "err": {},
              "uuid": "a1ba4c84-5be1-47fd-a2ec-a35f8637758d",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "快速排序1000个时间测试",
              "fullTitle": "排序算法测试 快速排序1000个时间测试",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).quick();\n}\ndone();",
              "err": {},
              "uuid": "4d83218b-0756-4ec8-9c91-5b1e0a88a119",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序基本功能测试",
              "fullTitle": "排序算法测试 堆排序基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr = arr.heap();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {
                "message": "AssertionError [ERR_ASSERTION]: '39,165,204,530,581,620,739,981,987,1074,1096,1126,1241,1618,1644,1842,2014,2123,2274,2284,2301,2466,2602,2612,2650,2654,2658,3001,3029,3104,3209,3316,3442,3485,3498,3546,3593,3783,3812,3815,3853,3875,3881,4200,4307,4416,4482,4671,4988,5033,5054,5070,5293,5295,5387,5497,5655,6096,6198,6284,6300,6382,6397,6491,6654,6656,6741,6787,6965,7225,7235,7363,7438,7500,7546,7702,7745,7787,7994,8006,8053,8286,8357,8381,8500,8655,8802,8896,9182,9199,9246,9395,9464,9535,9620,9644,9962' == '39,165,204,530,530,581,620,739,981,987,1074,1096,1126,1241,1618,1644,1842,2014,2123,2274,2284,2301,2466,2602,2612,2650,2650,2654,2658,3001,3029,3104,3209,3316,3442,3485,3498,3546,3593,3783,3812,3815,3853,3875,3881,4200,4307,4416,4482,4671,4988,5033,5054,5070,5293,5295,5387,5497,5655,6096,6198,6284,6300,6382,6397,6491,6654,6656,6741,6787,6965,7225,7235,7363,7438,7500,7546,7702,7745,7787,7994,8006,8053,8286,8286,8357,8381,8500,8655,8802,8896,9182,9199,9246,9395,9464,9535,9620,9644,9962'",
                "estack": "AssertionError [ERR_ASSERTION]: '39,165,204,530,581,620,739,981,987,1074,1096,1126,1241,1618,1644,1842,2014,2123,2274,2284,2301,2466,2602,2612,2650,2654,2658,3001,3029,3104,3209,3316,3442,3485,3498,3546,3593,3783,3812,3815,3853,3875,3881,4200,4307,4416,4482,4671,4988,5033,5054,5070,5293,5295,5387,5497,5655,6096,6198,6284,6300,6382,6397,6491,6654,6656,6741,6787,6965,7225,7235,7363,7438,7500,7546,7702,7745,7787,7994,8006,8053,8286,8357,8381,8500,8655,8802,8896,9182,9199,9246,9395,9464,9535,9620,9644,9962' == '39,165,204,530,530,581,620,739,981,987,1074,1096,1126,1241,1618,1644,1842,2014,2123,2274,2284,2301,2466,2602,2612,2650,2650,2654,2658,3001,3029,3104,3209,3316,3442,3485,3498,3546,3593,3783,3812,3815,3853,3875,3881,4200,4307,4416,4482,4671,4988,5033,5054,5070,5293,5295,5387,5497,5655,6096,6198,6284,6300,6382,6397,6491,6654,6656,6741,6787,6965,7225,7235,7363,7438,7500,7546,7702,7745,7787,7994,8006,8053,8286,8286,8357,8381,8500,8655,8802,8896,9182,9199,9246,9395,9464,9535,9620,9644,9962'\n    at Context.done (tests\\util\\sort.spec.js:233:11)\n    at processImmediate (internal/timers.js:443:21)",
                "diff": "- 39,165,204,530,581,620,739,981,987,1074,1096,1126,1241,1618,1644,1842,2014,2123,2274,2284,2301,2466,2602,2612,2650,2654,2658,3001,3029,3104,3209,3316,3442,3485,3498,3546,3593,3783,3812,3815,3853,3875,3881,4200,4307,4416,4482,4671,4988,5033,5054,5070,5293,5295,5387,5497,5655,6096,6198,6284,6300,6382,6397,6491,6654,6656,6741,6787,6965,7225,7235,7363,7438,7500,7546,7702,7745,7787,7994,8006,8053,8286,8357,8381,8500,8655,8802,8896,9182,9199,9246,9395,9464,9535,9620,9644,9962\n+ 39,165,204,530,530,581,620,739,981,987,1074,1096,1126,1241,1618,1644,1842,2014,2123,2274,2284,2301,2466,2602,2612,2650,2650,2654,2658,3001,3029,3104,3209,3316,3442,3485,3498,3546,3593,3783,3812,3815,3853,3875,3881,4200,4307,4416,4482,4671,4988,5033,5054,5070,5293,5295,5387,5497,5655,6096,6198,6284,6300,6382,6397,6491,6654,6656,6741,6787,6965,7225,7235,7363,7438,7500,7546,7702,7745,7787,7994,8006,8053,8286,8286,8357,8381,8500,8655,8802,8896,9182,9199,9246,9395,9464,9535,9620,9644,9962\n"
              },
              "uuid": "3b55268e-b1ba-4305-84ba-d9133bb50946",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序100个时间测试",
              "fullTitle": "排序算法测试 堆排序100个时间测试",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).heap();\n}\ndone();",
              "err": {},
              "uuid": "8350adef-d120-4bc7-ac98-d583cbef71f4",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序1000个时间测试",
              "fullTitle": "排序算法测试 堆排序1000个时间测试",
              "timedOut": false,
              "duration": 250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).heap();\n}\ndone();",
              "err": {},
              "uuid": "6bfa2aa4-10d7-4344-873d-3db594ccd964",
              "parentUUID": "27e25b3e-2b14-492c-8c0b-ba86f622c9cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64e304ce-c05e-4528-8a5d-6abdd56ea1fe",
            "40a9a240-b252-43eb-8f18-9d108f744482",
            "ac2ce64d-1e0c-4f2a-be89-4baefbfecb4a",
            "f1fa9958-e244-48e1-806b-9b07b9c82ed3",
            "1af0d320-33b9-4bff-a676-9be74df0b3c8",
            "99f57235-d799-4bc4-8700-c0bd1dfcbd6d",
            "1586754c-c062-48d5-87b5-38223982c426",
            "a5be0fbb-1ba7-47e4-b814-e84160caf05e",
            "058d0c70-cc95-47f8-a491-383b65f5b86c",
            "ea92e867-faba-4989-ac38-019e8057ca33",
            "f4f0c921-fa1a-4e59-b89d-d97c7cbbcc14",
            "78d6fbde-aac7-4ae6-9f34-efe63c1c315a",
            "9fc7d6de-087f-4688-98e3-1803f27cc822",
            "8baaca0c-6c69-4210-bb40-bf7c57e6072c",
            "b53e7ad9-2fe7-487a-88cb-52daf91082aa",
            "a72034d7-64f5-4092-89d7-bd88686432e6",
            "10379ae9-5063-46b7-88dc-7a3125c09aa9",
            "55b8ea12-315a-49e1-8506-4da426ef493e",
            "a1ba4c84-5be1-47fd-a2ec-a35f8637758d",
            "4d83218b-0756-4ec8-9c91-5b1e0a88a119",
            "8350adef-d120-4bc7-ac98-d583cbef71f4",
            "6bfa2aa4-10d7-4344-873d-3db594ccd964"
          ],
          "failures": [
            "5891a361-dde1-43b5-bb4a-4f35b9d035fb",
            "3b55268e-b1ba-4305-84ba-d9133bb50946"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5627,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "./docs/customReportFilename"
      },
      "version": "4.0.1"
    }
  }
}