{
  "stats": {
    "suites": 9,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-22T14:42:22.222Z",
    "end": "2019-07-22T14:42:27.322Z",
    "duration": 5100,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "472dd4e4-0d28-4e80-aec4-5795b3337636",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3854722-708a-4310-b6d3-a15fc514a6c9",
          "title": "列表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\list.spec.js",
          "file": "\\tests\\util\\list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "append 函数测试",
              "fullTitle": "列表基本功能测试 append 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nassert.equal(list.currPos, 0);\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.currPos, 1);\nassert.equal(list.getElement(), 2);\nlist.next()\nassert.equal(list.currPos, 2);\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), 1);\nassert.equal(list.length, 3);\nassert.equal(list.toString(), '1,2,3');\ndone();",
              "err": {},
              "uuid": "ecceb78b-d268-48de-a47a-8652fa9a7de5",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove 函数测试",
              "fullTitle": "列表基本功能测试 remove 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2)\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), -1);\nassert.equal(list.length, 2);\nassert.equal(list.toString(), '1,3');\nassert.equal(list.remove(4), false);\nassert.equal(list.toString(), '1,3');\ndone();",
              "err": {},
              "uuid": "0a5ae368-7906-44fc-9a4e-b776ede4ab3a",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clear 函数测试",
              "fullTitle": "列表基本功能测试 clear 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.clear();\nassert.equal(list.length, 0);\nassert.equal(list.toString(), '');\ndone();",
              "err": {},
              "uuid": "724a3569-9db5-4d12-b0cf-3f2fa33d6ed5",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "insert 函数测试",
              "fullTitle": "列表基本功能测试 insert 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.insert(2, 4);\nlist.insert(4, 5);\nlist.insert(6, 7);\nassert.equal(list.length, 5);\nassert.equal(list.toString(), '1,2,4,5,3');\ndone();",
              "err": {},
              "uuid": "a899f47e-64cc-4a44-92df-ade5d956e3b2",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "prev next 函数测试",
              "fullTitle": "列表基本功能测试 prev next 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.next();\nassert.equal(list.getElement(), 3);\nlist.front();\nassert.equal(list.getElement(), 1);\nlist.end();\nassert.equal(list.getElement(), 4);\nlist.prev();\nassert.equal(list.getElement(), 3);\ndone();",
              "err": {},
              "uuid": "544e9896-1aab-4b87-8cc4-564fe302355b",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "moveTo 函数测试",
              "fullTitle": "列表基本功能测试 moveTo 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.moveTo(4);\nassert.equal(list.getElement(), 4);\nlist.moveTo(1);\nassert.equal(list.getElement(), 2);\ndone();",
              "err": {},
              "uuid": "fd5b957d-badd-4e30-9aec-2af5f841cde6",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains 函数测试",
              "fullTitle": "列表基本功能测试 contains 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nassert.equal(list.contains(2), true);\nassert.equal(list.contains(4), true);\nassert.equal(list.contains(6), false);\ndone();",
              "err": {},
              "uuid": "7e1f8dfe-535f-4e77-bf88-6fa2a871aed2",
              "parentUUID": "a3854722-708a-4310-b6d3-a15fc514a6c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecceb78b-d268-48de-a47a-8652fa9a7de5",
            "0a5ae368-7906-44fc-9a4e-b776ede4ab3a",
            "724a3569-9db5-4d12-b0cf-3f2fa33d6ed5",
            "a899f47e-64cc-4a44-92df-ade5d956e3b2",
            "544e9896-1aab-4b87-8cc4-564fe302355b",
            "fd5b957d-badd-4e30-9aec-2af5f841cde6",
            "7e1f8dfe-535f-4e77-bf88-6fa2a871aed2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44a7e04f-6a5f-4cbc-8ab7-addc28a4b994",
          "title": "栈基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\stack.spec.js",
          "file": "\\tests\\util\\stack.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "栈基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stack = new Stack();\nstack.push(1);\nassert.equal(stack.top, 1);\nstack.push(2);\nassert.equal(stack.top, 2);\nstack.push(3);\nassert.equal(stack.top, 3);\nstack.push(4);\nassert.equal(stack.top, 4);\nassert.equal(stack.peek(), 4);\nstack.pop();\nassert.equal(stack.top, 3);\nassert.equal(stack.peek(), 3);\nstack.pop();\nassert.equal(stack.top, 2);\nassert.equal(stack.peek(), 2);\nstack.clear();\nstack.push(3);\nassert.equal(stack.top, 1);\nassert.equal(stack.peek(), 3);\ndone();",
              "err": {},
              "uuid": "7f1fa0db-ab73-48c4-8192-f93d8b6026e8",
              "parentUUID": "44a7e04f-6a5f-4cbc-8ab7-addc28a4b994",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f1fa0db-ab73-48c4-8192-f93d8b6026e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e0944127-2d2d-4f97-b225-8a1120b089de",
          "title": "队列基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\queue.spec.js",
          "file": "\\tests\\util\\queue.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "队列基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queue = new Queue();\nassert.equal(queue.empty(), true);\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nassert.equal(queue.toString(), \n`1\n2\n3`);\nqueue.dequeue();\nassert.equal(queue.toString(), \n`2\n3`);\nassert.equal(queue.length, 2) \nqueue.enqueue(5);\nassert.equal(queue.front(), 2);\nassert.equal(queue.toString(), \n`2\n3\n5`);\nassert.equal(queue.back(), 5);\nassert.equal(queue.empty(), false);\ndone();",
              "err": {},
              "uuid": "2a1960c0-0f83-406f-97e7-a47df876255b",
              "parentUUID": "e0944127-2d2d-4f97-b225-8a1120b089de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a1960c0-0f83-406f-97e7-a47df876255b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "291fe636-dc94-4076-b1fd-6146c43e8775",
          "title": "链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\listNode.spec.js",
          "file": "\\tests\\util\\listNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nassert.equal(listNode.display(), '1 => 2 => 3 => 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 3 => 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 4');\ndone();",
              "err": {},
              "uuid": "2e46a3b1-01ba-49d2-a25f-ff30568bb5ee",
              "parentUUID": "291fe636-dc94-4076-b1fd-6146c43e8775",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e46a3b1-01ba-49d2-a25f-ff30568bb5ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c46c664b-ba1c-4f81-a393-378707f27ccd",
          "title": "双向链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\doubleListNode.spec.js",
          "file": "\\tests\\util\\doubleListNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "双向链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 <=> 2 <=> 3 <=> 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 3 <=> 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 4');\nassert.equal(listNode.findNext(2), node2_5);\nassert.equal(listNode.findNext(4), null);\nassert.equal(listNode.findNext(5), false);\ndone();",
              "err": {},
              "uuid": "7c63b954-4103-4bdb-9288-bd1d2baffb83",
              "parentUUID": "c46c664b-ba1c-4f81-a393-378707f27ccd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c63b954-4103-4bdb-9288-bd1d2baffb83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34ef9170-f4ec-466b-b973-e61def293e48",
          "title": "集合基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\set.spec.js",
          "file": "\\tests\\util\\set.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "集合基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const set1 = new Gather([1, 2, 3, 4, 4]);\nconst set2 = new Gather([2, 4, 6, 7]);\nassert.equal(set1.display(), '1,2,3,4');\nlet intersect = Gather.intersect(set1, set2);\nassert.equal(intersect.display(), '2,4');\nlet union = Gather.union(set1, set2);\nassert.equal(union.display(), '1,2,3,4,6,7');\nlet complementary = Gather.complementary(set1, new Gather([1, 2, 3, 4, 5, 6]));\nassert.equal(complementary.display(), '5,6');\nlet difference = Gather.difference(set1, set2);\nassert.equal(difference.display(), '1,3,6,7');\ndone();",
              "err": {},
              "uuid": "c84f730b-4af1-4335-88f6-ef74e5e6ccde",
              "parentUUID": "34ef9170-f4ec-466b-b973-e61def293e48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c84f730b-4af1-4335-88f6-ef74e5e6ccde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6ce7eed-59d1-4dbd-b5c5-a735c1d26eaf",
          "title": "二叉树基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\BST.spec.js",
          "file": "\\tests\\util\\BST.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "二叉树基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bst = new BST(50);\nconst node_25 = bst.insert(25);\nbst.insert(15);\nbst.insert(30);\nbst.insert(30);\nbst.insert(35);\nbst.insert(32);\nbst.insert(34);\nconst node_55 = bst.insert(55);\nbst.insert(53);\nbst.insert(54);\nbst.insert(75);\nbst.insert(67);\nbst.insert(70);\nassert.equal(bst.inOrder(), '15,25,30,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.find(50), bst.root);\nassert.equal(bst.find(25), node_25);\nassert.equal(bst.find(55), node_55);\nassert.equal(bst.find(72), false);\nassert.equal(bst.getMin().show(), 15);\nassert.equal(bst.getMax().show(), 75);\nbst.remove(15);\nassert.equal(bst.inOrder(), '25,30,32,34,35,50,53,54,55,67,70,75');\nbst.remove(30);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.remove(58), false);\nbst.remove(55);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,67,70,75');\nbst.remove(35);\nassert.equal(bst.inOrder(), '25,32,34,50,53,54,67,70,75');\nbst.remove(50);\nassert.equal(bst.inOrder(), '25,32,34,53,54,67,70,75');\ndone();",
              "err": {},
              "uuid": "182195d1-f782-4f2d-a743-4e9e684fcd6a",
              "parentUUID": "d6ce7eed-59d1-4dbd-b5c5-a735c1d26eaf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "182195d1-f782-4f2d-a743-4e9e684fcd6a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8115fbd-d5fc-425d-acf7-5bb4e63e88b7",
          "title": "图基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\graph.spec.js",
          "file": "\\tests\\util\\graph.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "图基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const graph = new Graph(7);\ngraph.addEdge(0, 1);\ngraph.addEdge(0, 2);\ngraph.addEdge(0, 3);\ngraph.addEdge(1, 4);\ngraph.addEdge(2, 5);\ngraph.addEdge(4, 6);\nlet edgs = [\n\t[1, 2, 3],\n\t[0, 4],\n\t[0, 5],\n\t[0],\n\t[1, 6],\n\t[2],\n\t[4]\n]\nconsole.log(edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.showGraph(), edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.dfs(0), '0,1,4,6,2,5,3');\t\t\nassert.equal(graph.bfs(0), '0,1,2,3,4,5,6');\ndone();",
              "err": {},
              "uuid": "8f3f3940-878e-4077-8f1e-5042c67154b4",
              "parentUUID": "e8115fbd-d5fc-425d-acf7-5bb4e63e88b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f3f3940-878e-4077-8f1e-5042c67154b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
          "title": "排序算法测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\sort.spec.js",
          "file": "\\tests\\util\\sort.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "随机数组基本功能测试",
              "fullTitle": "排序算法测试 随机数组基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let arr = new randomArr(100);\nassert.equal(arr.length, 100);\nlet allNum = arr.every(item => {\n\treturn typeof item === 'number' && 0 < item && item < 1000;\n});\nassert.equal(allNum, true);\ndone();",
              "err": {},
              "uuid": "31d8893d-8554-48a9-9c8a-e219bbe586f9",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "原生排序100个时间测试",
              "fullTitle": "排序算法测试 原生排序100个时间测试",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).sort((a, b) => a - b);\n}\ndone();",
              "err": {},
              "uuid": "92e2d681-ba46-45b3-8fa0-d1770cb5e835",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "原生排序1000个时间测试",
              "fullTitle": "排序算法测试 原生排序1000个时间测试",
              "timedOut": false,
              "duration": 328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).sort((a, b) => a - b);\n}\ndone();",
              "err": {},
              "uuid": "cf303816-b897-4f57-ab92-19e3915b80c5",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序基本功能测试",
              "fullTitle": "排序算法测试 冒泡排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.bubble();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "0cf18d61-7027-447e-a079-d3c1022f4c5d",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序100个时间测试",
              "fullTitle": "排序算法测试 冒泡排序100个时间测试",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).bubble();\n}\ndone();",
              "err": {},
              "uuid": "17fe0417-f23c-47c2-96b6-2678d029a54f",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序1000个时间测试",
              "fullTitle": "排序算法测试 冒泡排序1000个时间测试",
              "timedOut": false,
              "duration": 1271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).bubble();\n}\ndone();",
              "err": {},
              "uuid": "7a182aa9-8d0e-4c32-b261-61eb2badf8ea",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序基本功能测试",
              "fullTitle": "排序算法测试 选择排序基本功能测试",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.selection();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "d2680442-54ae-4d01-a905-5804eafd53cf",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序100个时间测试",
              "fullTitle": "排序算法测试 选择排序100个时间测试",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).selection();\n}\ndone();",
              "err": {},
              "uuid": "4abac6fd-75c2-4901-ad56-7711cbd3d346",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序1000个时间测试",
              "fullTitle": "排序算法测试 选择排序1000个时间测试",
              "timedOut": false,
              "duration": 961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).selection();\n}\ndone();",
              "err": {},
              "uuid": "79cc4847-0373-49af-aaa0-203c1be1392c",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序基本功能测试",
              "fullTitle": "排序算法测试 插入排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.insertion();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "86d201a8-941e-41bd-838e-46e9f945e80c",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序100个时间测试",
              "fullTitle": "排序算法测试 插入排序100个时间测试",
              "timedOut": false,
              "duration": 172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).insertion();\n}\ndone();",
              "err": {},
              "uuid": "9f29de92-01c1-445f-ac41-57f525f7ec08",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序1000个时间测试",
              "fullTitle": "排序算法测试 插入排序1000个时间测试",
              "timedOut": false,
              "duration": 554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).insertion();\n}\ndone();",
              "err": {},
              "uuid": "b53f4e5f-f15c-4789-81a7-6455060df9ae",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序基本功能测试",
              "fullTitle": "排序算法测试 希尔排序基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.shell();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "b0c3234d-aca1-4bac-ac47-fc7d6116c362",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序100个时间测试",
              "fullTitle": "排序算法测试 希尔排序100个时间测试",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).shell();\n}\ndone();",
              "err": {},
              "uuid": "367021e6-0915-4465-8817-7f552e052375",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序1000个时间测试",
              "fullTitle": "排序算法测试 希尔排序1000个时间测试",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).shell();\n}\ndone();",
              "err": {},
              "uuid": "99f43ebe-ec88-4332-ad10-ff3b51a35b02",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序基本功能测试",
              "fullTitle": "排序算法测试 归并排序基本功能测试",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr = arr.merge();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "f3998c77-243a-4057-983c-17a87fc69c02",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序100个时间测试",
              "fullTitle": "排序算法测试 归并排序100个时间测试",
              "timedOut": false,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(100).merge();\n}\ndone();",
              "err": {},
              "uuid": "1b4af0af-37e3-47a7-9ac6-7cedc7fcae86",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序1000个时间测试",
              "fullTitle": "排序算法测试 归并排序1000个时间测试",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 100;\nwhile (count--) {\n\tnew randomArr(1000).merge();\n}\ndone();",
              "err": {},
              "uuid": "82d050c4-86d7-47d5-996b-e206ccba4168",
              "parentUUID": "4c9f2d32-6b09-4a96-8450-7e9c2b2843fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31d8893d-8554-48a9-9c8a-e219bbe586f9",
            "92e2d681-ba46-45b3-8fa0-d1770cb5e835",
            "cf303816-b897-4f57-ab92-19e3915b80c5",
            "0cf18d61-7027-447e-a079-d3c1022f4c5d",
            "17fe0417-f23c-47c2-96b6-2678d029a54f",
            "7a182aa9-8d0e-4c32-b261-61eb2badf8ea",
            "d2680442-54ae-4d01-a905-5804eafd53cf",
            "4abac6fd-75c2-4901-ad56-7711cbd3d346",
            "79cc4847-0373-49af-aaa0-203c1be1392c",
            "86d201a8-941e-41bd-838e-46e9f945e80c",
            "9f29de92-01c1-445f-ac41-57f525f7ec08",
            "b53f4e5f-f15c-4789-81a7-6455060df9ae",
            "b0c3234d-aca1-4bac-ac47-fc7d6116c362",
            "367021e6-0915-4465-8817-7f552e052375",
            "99f43ebe-ec88-4332-ad10-ff3b51a35b02",
            "f3998c77-243a-4057-983c-17a87fc69c02",
            "1b4af0af-37e3-47a7-9ac6-7cedc7fcae86",
            "82d050c4-86d7-47d5-996b-e206ccba4168"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5053,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "./docs/customReportFilename"
      },
      "version": "4.0.1"
    }
  }
}