{
  "stats": {
    "suites": 9,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-24T12:02:16.165Z",
    "end": "2019-07-24T12:02:24.642Z",
    "duration": 8477,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6794e30e-22a3-4aaf-bb83-5999c7a8e4a7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
          "title": "列表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\list.spec.js",
          "file": "\\tests\\util\\list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "append 函数测试",
              "fullTitle": "列表基本功能测试 append 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nassert.equal(list.currPos, 0);\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.currPos, 1);\nassert.equal(list.getElement(), 2);\nlist.next()\nassert.equal(list.currPos, 2);\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), 1);\nassert.equal(list.length, 3);\nassert.equal(list.toString(), '1,2,3');\ndone();",
              "err": {},
              "uuid": "78677230-3197-43b9-9709-08fc8b5a8dfe",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove 函数测试",
              "fullTitle": "列表基本功能测试 remove 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2)\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), -1);\nassert.equal(list.length, 2);\nassert.equal(list.toString(), '1,3');\nassert.equal(list.remove(4), false);\nassert.equal(list.toString(), '1,3');\ndone();",
              "err": {},
              "uuid": "7db7bd86-06ad-4f95-99bd-4e3819d3b8d6",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clear 函数测试",
              "fullTitle": "列表基本功能测试 clear 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.clear();\nassert.equal(list.length, 0);\nassert.equal(list.toString(), '');\ndone();",
              "err": {},
              "uuid": "dfac1623-4b52-444b-998b-996c58c35eba",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "insert 函数测试",
              "fullTitle": "列表基本功能测试 insert 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.insert(2, 4);\nlist.insert(4, 5);\nlist.insert(6, 7);\nassert.equal(list.length, 5);\nassert.equal(list.toString(), '1,2,4,5,3');\ndone();",
              "err": {},
              "uuid": "a9d75a57-524a-4a40-807d-e19b6b74b151",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "prev next 函数测试",
              "fullTitle": "列表基本功能测试 prev next 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.next();\nassert.equal(list.getElement(), 3);\nlist.front();\nassert.equal(list.getElement(), 1);\nlist.end();\nassert.equal(list.getElement(), 4);\nlist.prev();\nassert.equal(list.getElement(), 3);\ndone();",
              "err": {},
              "uuid": "a2093c65-06fc-4ccf-9a9a-5288f9ba0f0a",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "moveTo 函数测试",
              "fullTitle": "列表基本功能测试 moveTo 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.moveTo(4);\nassert.equal(list.getElement(), 4);\nlist.moveTo(1);\nassert.equal(list.getElement(), 2);\ndone();",
              "err": {},
              "uuid": "cf298dbb-d990-4ecc-abdd-cfa77f49aa26",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains 函数测试",
              "fullTitle": "列表基本功能测试 contains 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nassert.equal(list.contains(2), true);\nassert.equal(list.contains(4), true);\nassert.equal(list.contains(6), false);\ndone();",
              "err": {},
              "uuid": "2e672ac1-3f9e-4336-9cc5-e9b45b654eb0",
              "parentUUID": "a89e5274-5ae6-4884-aacc-acb80fbec2eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78677230-3197-43b9-9709-08fc8b5a8dfe",
            "7db7bd86-06ad-4f95-99bd-4e3819d3b8d6",
            "dfac1623-4b52-444b-998b-996c58c35eba",
            "a9d75a57-524a-4a40-807d-e19b6b74b151",
            "a2093c65-06fc-4ccf-9a9a-5288f9ba0f0a",
            "cf298dbb-d990-4ecc-abdd-cfa77f49aa26",
            "2e672ac1-3f9e-4336-9cc5-e9b45b654eb0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2255c0d3-7944-4553-8757-b30f90d4016e",
          "title": "栈基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\stack.spec.js",
          "file": "\\tests\\util\\stack.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "栈基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stack = new Stack();\nstack.push(1);\nassert.equal(stack.top, 1);\nstack.push(2);\nassert.equal(stack.top, 2);\nstack.push(3);\nassert.equal(stack.top, 3);\nstack.push(4);\nassert.equal(stack.top, 4);\nassert.equal(stack.peek(), 4);\nstack.pop();\nassert.equal(stack.top, 3);\nassert.equal(stack.peek(), 3);\nstack.pop();\nassert.equal(stack.top, 2);\nassert.equal(stack.peek(), 2);\nstack.clear();\nstack.push(3);\nassert.equal(stack.top, 1);\nassert.equal(stack.peek(), 3);\ndone();",
              "err": {},
              "uuid": "770222c7-fdb9-420e-914b-2399c130be05",
              "parentUUID": "2255c0d3-7944-4553-8757-b30f90d4016e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "770222c7-fdb9-420e-914b-2399c130be05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "314d3d48-26ed-43de-ba3a-16d96e0ae760",
          "title": "队列基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\queue.spec.js",
          "file": "\\tests\\util\\queue.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "队列基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queue = new Queue();\nassert.equal(queue.empty(), true);\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nassert.equal(queue.toString(), \n`1\n2\n3`);\nqueue.dequeue();\nassert.equal(queue.toString(), \n`2\n3`);\nassert.equal(queue.length, 2) \nqueue.enqueue(5);\nassert.equal(queue.front(), 2);\nassert.equal(queue.toString(), \n`2\n3\n5`);\nassert.equal(queue.back(), 5);\nassert.equal(queue.empty(), false);\ndone();",
              "err": {},
              "uuid": "245829dc-54c3-4597-ad1b-35582a0f9fc8",
              "parentUUID": "314d3d48-26ed-43de-ba3a-16d96e0ae760",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "245829dc-54c3-4597-ad1b-35582a0f9fc8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "840de196-2e60-4222-a071-6ad3bcfc8304",
          "title": "链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\listNode.spec.js",
          "file": "\\tests\\util\\listNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nassert.equal(listNode.display(), '1 => 2 => 3 => 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 3 => 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 4');\ndone();",
              "err": {},
              "uuid": "a8fdf68b-7b16-491c-81a1-dea6d7956935",
              "parentUUID": "840de196-2e60-4222-a071-6ad3bcfc8304",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8fdf68b-7b16-491c-81a1-dea6d7956935"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3ad47610-f793-4f2d-aa2a-3821fd978c8b",
          "title": "双向链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\doubleListNode.spec.js",
          "file": "\\tests\\util\\doubleListNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "双向链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 <=> 2 <=> 3 <=> 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 3 <=> 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 4');\nassert.equal(listNode.findNext(2), node2_5);\nassert.equal(listNode.findNext(4), null);\nassert.equal(listNode.findNext(5), false);\ndone();",
              "err": {},
              "uuid": "c75e2999-88c0-4ef0-96c7-529b8f36ae36",
              "parentUUID": "3ad47610-f793-4f2d-aa2a-3821fd978c8b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c75e2999-88c0-4ef0-96c7-529b8f36ae36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0c9a27fb-744e-453e-8d23-f0b44be3add0",
          "title": "集合基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\set.spec.js",
          "file": "\\tests\\util\\set.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "集合基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const set1 = new Gather([1, 2, 3, 4, 4]);\nconst set2 = new Gather([2, 4, 6, 7]);\nassert.equal(set1.display(), '1,2,3,4');\nlet intersect = Gather.intersect(set1, set2);\nassert.equal(intersect.display(), '2,4');\nlet union = Gather.union(set1, set2);\nassert.equal(union.display(), '1,2,3,4,6,7');\nlet complementary = Gather.complementary(set1, new Gather([1, 2, 3, 4, 5, 6]));\nassert.equal(complementary.display(), '5,6');\nlet difference = Gather.difference(set1, set2);\nassert.equal(difference.display(), '1,3,6,7');\ndone();",
              "err": {},
              "uuid": "b376c6cc-5f1e-4a3f-ad83-85e84869c935",
              "parentUUID": "0c9a27fb-744e-453e-8d23-f0b44be3add0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b376c6cc-5f1e-4a3f-ad83-85e84869c935"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dfed7514-dfb3-404d-b33c-a233805e62ec",
          "title": "二叉树基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\BST.spec.js",
          "file": "\\tests\\util\\BST.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "二叉树基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bst = new BST(50);\nconst node_25 = bst.insert(25);\nbst.insert(15);\nbst.insert(30);\nbst.insert(30);\nbst.insert(35);\nbst.insert(32);\nbst.insert(34);\nconst node_55 = bst.insert(55);\nbst.insert(53);\nbst.insert(54);\nbst.insert(75);\nbst.insert(67);\nbst.insert(70);\nassert.equal(bst.inOrder(), '15,25,30,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.find(50), bst.root);\nassert.equal(bst.find(25), node_25);\nassert.equal(bst.find(55), node_55);\nassert.equal(bst.find(72), false);\nassert.equal(bst.getMin().show(), 15);\nassert.equal(bst.getMax().show(), 75);\nbst.remove(15);\nassert.equal(bst.inOrder(), '25,30,32,34,35,50,53,54,55,67,70,75');\nbst.remove(30);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.remove(58), false);\nbst.remove(55);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,67,70,75');\nbst.remove(35);\nassert.equal(bst.inOrder(), '25,32,34,50,53,54,67,70,75');\nbst.remove(50);\nassert.equal(bst.inOrder(), '25,32,34,53,54,67,70,75');\ndone();",
              "err": {},
              "uuid": "c57d4065-2b96-4eb2-a594-0f01ef43a999",
              "parentUUID": "dfed7514-dfb3-404d-b33c-a233805e62ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c57d4065-2b96-4eb2-a594-0f01ef43a999"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ebccdbe-5725-49f7-81ab-53d8706a58c5",
          "title": "图基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\graph.spec.js",
          "file": "\\tests\\util\\graph.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "图基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const graph = new Graph(7);\ngraph.addEdge(0, 1);\ngraph.addEdge(0, 2);\ngraph.addEdge(0, 3);\ngraph.addEdge(1, 4);\ngraph.addEdge(2, 5);\ngraph.addEdge(4, 6);\nlet edgs = [\n\t[1, 2, 3],\n\t[0, 4],\n\t[0, 5],\n\t[0],\n\t[1, 6],\n\t[2],\n\t[4]\n]\nconsole.log(edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.showGraph(), edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.dfs(0), '0,1,4,6,2,5,3');\t\t\nassert.equal(graph.bfs(0), '0,1,2,3,4,5,6');\ndone();",
              "err": {},
              "uuid": "82d4dbb2-e7b2-44af-a354-b98ad2138bf9",
              "parentUUID": "8ebccdbe-5725-49f7-81ab-53d8706a58c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82d4dbb2-e7b2-44af-a354-b98ad2138bf9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "db597234-a006-48f6-972e-569687c4123f",
          "title": "排序算法测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\sort.spec.js",
          "file": "\\tests\\util\\sort.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "随机数组基本功能测试",
              "fullTitle": "排序算法测试 随机数组基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let arr = new randomArr(100);\nassert.equal(arr.length, 100);\nlet allNum = arr.every(item => {\n\treturn typeof item === 'number' && 0 < item && item < 10000;\n});\nassert.equal(allNum, true);\ndone();",
              "err": {},
              "uuid": "25316048-57d8-4c4c-94d0-040d6a48da99",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序基本功能测试",
              "fullTitle": "排序算法测试 冒泡排序基本功能测试",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.bubble();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "3a6f6f3b-f1b2-432e-a62c-0674e2aa81ca",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序基本功能测试",
              "fullTitle": "排序算法测试 选择排序基本功能测试",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.selection();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "a4091895-28e7-4fa7-8ce6-51582135b064",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序基本功能测试",
              "fullTitle": "排序算法测试 插入排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.insertion();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "f3476a56-1c53-4673-99e7-838e74fe6f20",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序基本功能测试",
              "fullTitle": "排序算法测试 希尔排序基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.shell();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "ebe91091-c88c-4c56-9ec6-1e60e7168065",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序基本功能测试",
              "fullTitle": "排序算法测试 归并排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.merge();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "6d6e7dfe-db57-45e5-afa3-4dbe64ebbab1",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "快速排序基本功能测试",
              "fullTitle": "排序算法测试 快速排序基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.quick();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "22d0fbcc-26b1-4862-92c4-fec5d103fb85",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序基本功能测试",
              "fullTitle": "排序算法测试 堆排序基本功能测试",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.heap();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "6b55d432-4d68-4e9a-8c4b-f694d44fbc5a",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "计数排序基本功能测试",
              "fullTitle": "排序算法测试 计数排序基本功能测试",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.counting();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "45ec050a-06ba-4c77-b1eb-9600b323178b",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "桶排序基本功能测试",
              "fullTitle": "排序算法测试 桶排序基本功能测试",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.bucket();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "14b21104-68f9-45ab-9256-34a099c68ea8",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "原生排序100个时间测试",
              "fullTitle": "排序算法测试 原生排序100个时间测试",
              "timedOut": false,
              "duration": 309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).sort((a, b) => a - b);\n}\ndone();",
              "err": {},
              "uuid": "948282d0-07ef-4171-8e5b-94018dceb2e2",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序100个时间测试",
              "fullTitle": "排序算法测试 冒泡排序100个时间测试",
              "timedOut": false,
              "duration": 318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).bubble();\n}\ndone();",
              "err": {},
              "uuid": "63da548e-3de9-4105-9aac-65a62838ea3f",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序100个时间测试",
              "fullTitle": "排序算法测试 选择排序100个时间测试",
              "timedOut": false,
              "duration": 229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).selection();\n}\ndone();",
              "err": {},
              "uuid": "f7b726ee-5645-469f-ba36-9358af139c09",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序100个时间测试",
              "fullTitle": "排序算法测试 插入排序100个时间测试",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).insertion();\n}\ndone();",
              "err": {},
              "uuid": "e8dec6a9-590f-4efa-a424-9ccf31381891",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序100个时间测试",
              "fullTitle": "排序算法测试 希尔排序100个时间测试",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).shell();\n}\ndone();",
              "err": {},
              "uuid": "032ae8ab-e889-415d-ae70-e59d9f4b0e70",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序100个时间测试",
              "fullTitle": "排序算法测试 归并排序100个时间测试",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).merge();\n}\ndone();",
              "err": {},
              "uuid": "e547edc2-bd91-4d7f-b974-3bdb55c47d08",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "快速排序100个时间测试",
              "fullTitle": "排序算法测试 快速排序100个时间测试",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).quick();\n}\ndone();",
              "err": {},
              "uuid": "544a34b8-5f8f-4307-b0ab-fcbe3ae77a05",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序100个时间测试",
              "fullTitle": "排序算法测试 堆排序100个时间测试",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).heap();\n}\ndone();",
              "err": {},
              "uuid": "d5b17d2e-147c-4ee3-af09-a88adb223da3",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "计数排序10个时间测试",
              "fullTitle": "排序算法测试 计数排序10个时间测试",
              "timedOut": false,
              "duration": 479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(10).counting();\n}\ndone();",
              "err": {},
              "uuid": "9e167e7d-4c5b-4ebf-93aa-27881858225c",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "计数排序100个时间测试",
              "fullTitle": "排序算法测试 计数排序100个时间测试",
              "timedOut": false,
              "duration": 553,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(100).counting();\n}\ndone();",
              "err": {},
              "uuid": "c67a099b-22e9-4849-bae1-22d516f3cc25",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "桶排序100个时间测试",
              "fullTitle": "排序算法测试 桶排序100个时间测试",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).bucket();\n}\ndone();",
              "err": {},
              "uuid": "5e9683cf-8f4c-4ae0-b1a9-18379f31e8ed",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "原生排序1000个时间测试",
              "fullTitle": "排序算法测试 原生排序1000个时间测试",
              "timedOut": false,
              "duration": 396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).sort((a, b) => a - b);\n}\ndone();",
              "err": {},
              "uuid": "5231e405-0875-4fbd-bad4-685babdd36e4",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序1000个时间测试",
              "fullTitle": "排序算法测试 冒泡排序1000个时间测试",
              "timedOut": false,
              "duration": 1587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).bubble();\n}\ndone();",
              "err": {},
              "uuid": "951ca603-b7ef-4bb1-b128-93267f1d5e12",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序1000个时间测试",
              "fullTitle": "排序算法测试 选择排序1000个时间测试",
              "timedOut": false,
              "duration": 888,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).selection();\n}\ndone();",
              "err": {},
              "uuid": "8ade9aea-5d55-479d-a033-c553b91fbdc5",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序1000个时间测试",
              "fullTitle": "排序算法测试 插入排序1000个时间测试",
              "timedOut": false,
              "duration": 588,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).insertion();\n}\ndone();",
              "err": {},
              "uuid": "66af06be-daf5-4da0-9334-769b6eafa54d",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "希尔排序1000个时间测试",
              "fullTitle": "排序算法测试 希尔排序1000个时间测试",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).shell();\n}\ndone();",
              "err": {},
              "uuid": "05d72df2-cf02-4777-950b-3acadb973c17",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "归并排序1000个时间测试",
              "fullTitle": "排序算法测试 归并排序1000个时间测试",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).merge();\n}\ndone();",
              "err": {},
              "uuid": "8c9fe87e-ad59-4ab7-b9a7-6e0ef900de8b",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "快速排序1000个时间测试",
              "fullTitle": "排序算法测试 快速排序1000个时间测试",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).quick();\n}\ndone();",
              "err": {},
              "uuid": "d82aeb00-c7a3-47a3-bf3b-36a2ad3842cc",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序1000个时间测试",
              "fullTitle": "排序算法测试 堆排序1000个时间测试",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).heap();\n}\ndone();",
              "err": {},
              "uuid": "ffae25cb-2709-4954-9486-06391318128e",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "计数排序1000个时间测试",
              "fullTitle": "排序算法测试 计数排序1000个时间测试",
              "timedOut": false,
              "duration": 943,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).counting();\n}\ndone();",
              "err": {},
              "uuid": "2f248d22-b9d2-4f6b-b52f-843149d5aa87",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "桶排序1000个时间测试",
              "fullTitle": "排序算法测试 桶排序1000个时间测试",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 1000;\nwhile (count--) {\n\tnew randomArr(1000).bucket();\n}\ndone();",
              "err": {},
              "uuid": "9cf240eb-bd64-40cc-9925-a4975fa45b95",
              "parentUUID": "db597234-a006-48f6-972e-569687c4123f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25316048-57d8-4c4c-94d0-040d6a48da99",
            "3a6f6f3b-f1b2-432e-a62c-0674e2aa81ca",
            "a4091895-28e7-4fa7-8ce6-51582135b064",
            "f3476a56-1c53-4673-99e7-838e74fe6f20",
            "ebe91091-c88c-4c56-9ec6-1e60e7168065",
            "6d6e7dfe-db57-45e5-afa3-4dbe64ebbab1",
            "22d0fbcc-26b1-4862-92c4-fec5d103fb85",
            "6b55d432-4d68-4e9a-8c4b-f694d44fbc5a",
            "45ec050a-06ba-4c77-b1eb-9600b323178b",
            "14b21104-68f9-45ab-9256-34a099c68ea8",
            "948282d0-07ef-4171-8e5b-94018dceb2e2",
            "63da548e-3de9-4105-9aac-65a62838ea3f",
            "f7b726ee-5645-469f-ba36-9358af139c09",
            "e8dec6a9-590f-4efa-a424-9ccf31381891",
            "032ae8ab-e889-415d-ae70-e59d9f4b0e70",
            "e547edc2-bd91-4d7f-b974-3bdb55c47d08",
            "544a34b8-5f8f-4307-b0ab-fcbe3ae77a05",
            "d5b17d2e-147c-4ee3-af09-a88adb223da3",
            "9e167e7d-4c5b-4ebf-93aa-27881858225c",
            "c67a099b-22e9-4849-bae1-22d516f3cc25",
            "5e9683cf-8f4c-4ae0-b1a9-18379f31e8ed",
            "5231e405-0875-4fbd-bad4-685babdd36e4",
            "951ca603-b7ef-4bb1-b128-93267f1d5e12",
            "8ade9aea-5d55-479d-a033-c553b91fbdc5",
            "66af06be-daf5-4da0-9334-769b6eafa54d",
            "05d72df2-cf02-4777-950b-3acadb973c17",
            "8c9fe87e-ad59-4ab7-b9a7-6e0ef900de8b",
            "d82aeb00-c7a3-47a3-bf3b-36a2ad3842cc",
            "ffae25cb-2709-4954-9486-06391318128e",
            "2f248d22-b9d2-4f6b-b52f-843149d5aa87",
            "9cf240eb-bd64-40cc-9925-a4975fa45b95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8432,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "./docs/customReportFilename"
      },
      "version": "4.0.1"
    }
  }
}