{
  "stats": {
    "suites": 6,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-18T14:42:32.376Z",
    "end": "2019-07-18T14:42:32.395Z",
    "duration": 19,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f7707466-164e-4c33-8be1-ce948bdb214b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
          "title": "列表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\list.spec.js",
          "file": "\\tests\\util\\list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "append 函数测试",
              "fullTitle": "列表基本功能测试 append 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 2);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), 1);\nassert.equal(list.size, 3);\nassert.equal(list.toString(), '1,2,3');\ndone();",
              "err": {},
              "uuid": "e5add249-1d83-4c95-bb6e-4e8e4d9fee61",
              "parentUUID": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove 函数测试",
              "fullTitle": "列表基本功能测试 remove 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2)\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), -1);\nassert.equal(list.size, 2);\nassert.equal(list.toString(), '1,3');\nassert.equal(list.remove(4), false);\nassert.equal(list.toString(), '1,3');\ndone();",
              "err": {},
              "uuid": "0e3b800b-9f4e-4dfb-8a20-0e21b9a0904e",
              "parentUUID": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clear 函数测试",
              "fullTitle": "列表基本功能测试 clear 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.clear();\nassert.equal(list.size, 0);\nassert.equal(list.toString(), '');\ndone();",
              "err": {},
              "uuid": "6d0aa917-8021-4a15-a959-ba079eb2c338",
              "parentUUID": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "insert 函数测试",
              "fullTitle": "列表基本功能测试 insert 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.insert(2, 4);\nassert.equal(list.size, 4);\nassert.equal(list.toString(), '1,2,4,3');\ndone();",
              "err": {},
              "uuid": "0c0ddb4c-14c6-43bf-9801-7f270d61e0d9",
              "parentUUID": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "prev next 函数测试",
              "fullTitle": "列表基本功能测试 prev next 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.next();\nassert.equal(list.getElement(), 3);\nlist.front();\nassert.equal(list.getElement(), 1);\nlist.end();\nassert.equal(list.getElement(), 4);\nlist.prev();\nassert.equal(list.getElement(), 3);\ndone();",
              "err": {},
              "uuid": "a4d96b68-734a-4626-91a6-eb912f6c96c3",
              "parentUUID": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "moveTo 函数测试",
              "fullTitle": "列表基本功能测试 moveTo 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.moveTo(4);\nassert.equal(list.getElement(), 4);\nlist.moveTo(1);\nassert.equal(list.getElement(), 2);\ndone();",
              "err": {},
              "uuid": "00cfbad4-1a04-44db-acc4-8f8eb6b0a17b",
              "parentUUID": "f30b40c1-2c1d-4351-bff6-5ef3e44c60bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5add249-1d83-4c95-bb6e-4e8e4d9fee61",
            "0e3b800b-9f4e-4dfb-8a20-0e21b9a0904e",
            "6d0aa917-8021-4a15-a959-ba079eb2c338",
            "0c0ddb4c-14c6-43bf-9801-7f270d61e0d9",
            "a4d96b68-734a-4626-91a6-eb912f6c96c3",
            "00cfbad4-1a04-44db-acc4-8f8eb6b0a17b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d1315fd-ff1b-42f0-841a-53fb9cea313a",
          "title": "栈基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\stack.spec.js",
          "file": "\\tests\\util\\stack.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "栈基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stack = new Stack();\nstack.push(1);\nassert.equal(stack.top, 1);\nstack.push(2);\nassert.equal(stack.top, 2);\nstack.push(3);\nassert.equal(stack.top, 3);\nstack.push(4);\nassert.equal(stack.top, 4);\nassert.equal(stack.peek(), 4);\nstack.pop();\nassert.equal(stack.top, 3);\nassert.equal(stack.peek(), 3);\nstack.pop();\nassert.equal(stack.top, 2);\nassert.equal(stack.peek(), 2);\nstack.clear();\nstack.push(3);\nassert.equal(stack.top, 1);\nassert.equal(stack.peek(), 3);\ndone();",
              "err": {},
              "uuid": "21ffdbb0-970a-4ded-b1d1-0a3fe4666bfd",
              "parentUUID": "7d1315fd-ff1b-42f0-841a-53fb9cea313a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21ffdbb0-970a-4ded-b1d1-0a3fe4666bfd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "02c18048-45b3-4f1a-a9f0-aba18acc4957",
          "title": "队列基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\queue.spec.js",
          "file": "\\tests\\util\\queue.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "队列基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queue = new Queue();\nassert.equal(queue.empty(), true);\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nassert.equal(queue.toString(), \n`1\n2\n3`);\nqueue.dequeue();\nassert.equal(queue.toString(), \n`2\n3`);\nassert.equal(queue.length, 2) \nqueue.enqueue(5);\nassert.equal(queue.front(), 2);\nassert.equal(queue.toString(), \n`2\n3\n5`);\nassert.equal(queue.back(), 5);\nassert.equal(queue.empty(), false);\ndone();",
              "err": {},
              "uuid": "ff5de4c8-da01-492d-99b6-2e71f3c0d8d3",
              "parentUUID": "02c18048-45b3-4f1a-a9f0-aba18acc4957",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff5de4c8-da01-492d-99b6-2e71f3c0d8d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f598b59d-8e40-4cdb-9dea-f6cca607ce0e",
          "title": "链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\listNode.spec.js",
          "file": "\\tests\\util\\listNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nassert.equal(listNode.display(), '1 => 2 => 3 => 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.findPrevious(2), listNode.head);\nlet node2_5 = listNode.insert(2.5, 2);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 3 => 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 4');\ndone();",
              "err": {},
              "uuid": "f9ff8685-7fc4-4d5a-94e2-6924c8f8d2ad",
              "parentUUID": "f598b59d-8e40-4cdb-9dea-f6cca607ce0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9ff8685-7fc4-4d5a-94e2-6924c8f8d2ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f81c3885-712d-46ff-88bd-974c8d5d9b76",
          "title": "双向链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\doubleListNode.spec.js",
          "file": "\\tests\\util\\doubleListNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "双向链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nassert.equal(listNode.display(), '1 <=> 2 <=> 3 <=> 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.findPrevious(2), listNode.head);\nlet node2_5 = listNode.insert(2.5, 2);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 3 <=> 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 4');\nassert.equal(listNode.findNext(2), node2_5);\ndone();",
              "err": {},
              "uuid": "906c0746-0301-4bb0-a66f-9c2404193559",
              "parentUUID": "f81c3885-712d-46ff-88bd-974c8d5d9b76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "906c0746-0301-4bb0-a66f-9c2404193559"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ae129d3-cb12-402e-a828-7c25d948e621",
          "title": "集合基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\set.spec.js",
          "file": "\\tests\\util\\set.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "集合基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const set1 = new Gather([1, 2, 3, 4, 4]);\nconst set2 = new Gather([2, 4, 6, 7]);\nassert.equal(set1.display(), '1,2,3,4');\nlet intersect = Gather.intersect(set1, set2);\nassert.equal(intersect.display(), '2,4');\nlet union = Gather.union(set1, set2);\nassert.equal(union.display(), '1,2,3,4,6,7');\nlet complementary = Gather.complementary(set1, new Gather([1, 2, 3, 4, 5, 6]));\nassert.equal(complementary.display(), '5,6');\nlet difference = Gather.difference(set1, set2);\nassert.equal(difference.display(), '1,3,6,7');\ndone();",
              "err": {},
              "uuid": "c234601a-a014-4910-bb74-6dc94305e4d6",
              "parentUUID": "4ae129d3-cb12-402e-a828-7c25d948e621",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c234601a-a014-4910-bb74-6dc94305e4d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.1.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "./docs/customReportFilename"
      },
      "version": "4.0.1"
    }
  }
}