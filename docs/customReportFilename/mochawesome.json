{
  "stats": {
    "suites": 9,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-22T08:44:53.052Z",
    "end": "2019-07-22T08:44:53.804Z",
    "duration": 752,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c606b60f-82c7-4996-809d-ae87afe0241f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "97db9698-1a67-4817-a3de-17edab3a6783",
          "title": "列表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\list.spec.js",
          "file": "\\tests\\util\\list.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "append 函数测试",
              "fullTitle": "列表基本功能测试 append 函数测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nassert.equal(list.currPos, 0);\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.currPos, 1);\nassert.equal(list.getElement(), 2);\nlist.next()\nassert.equal(list.currPos, 2);\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), 1);\nassert.equal(list.length, 3);\nassert.equal(list.toString(), '1,2,3');\ndone();",
              "err": {},
              "uuid": "0ce8bf06-e055-4aa0-90d1-14a9b215f0a2",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove 函数测试",
              "fullTitle": "列表基本功能测试 remove 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.remove(2)\nassert.equal(list.getElement(), 1);\nlist.next()\nassert.equal(list.getElement(), 3);\nassert.equal(list.find(2), -1);\nassert.equal(list.length, 2);\nassert.equal(list.toString(), '1,3');\nassert.equal(list.remove(4), false);\nassert.equal(list.toString(), '1,3');\ndone();",
              "err": {},
              "uuid": "09bef4db-ab6f-4f7c-aaec-f48258b5095f",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "clear 函数测试",
              "fullTitle": "列表基本功能测试 clear 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.clear();\nassert.equal(list.length, 0);\nassert.equal(list.toString(), '');\ndone();",
              "err": {},
              "uuid": "a809f6f2-f408-495d-a87c-23feaa4e7d75",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "insert 函数测试",
              "fullTitle": "列表基本功能测试 insert 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.insert(2, 4);\nlist.insert(4, 5);\nlist.insert(6, 7);\nassert.equal(list.length, 5);\nassert.equal(list.toString(), '1,2,4,5,3');\ndone();",
              "err": {},
              "uuid": "11f69f49-858e-41c6-bb26-8164a124a2c4",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "prev next 函数测试",
              "fullTitle": "列表基本功能测试 prev next 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.next();\nassert.equal(list.getElement(), 3);\nlist.front();\nassert.equal(list.getElement(), 1);\nlist.end();\nassert.equal(list.getElement(), 4);\nlist.prev();\nassert.equal(list.getElement(), 3);\ndone();",
              "err": {},
              "uuid": "fbda5b89-8b36-441e-9fb7-10c9d41fa84d",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "moveTo 函数测试",
              "fullTitle": "列表基本功能测试 moveTo 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nlist.next();\nassert.equal(list.getElement(), 2);\nlist.moveTo(4);\nassert.equal(list.getElement(), 4);\nlist.moveTo(1);\nassert.equal(list.getElement(), 2);\ndone();",
              "err": {},
              "uuid": "e3e40a90-dd07-4e1f-ac5d-978a42b6e1a7",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains 函数测试",
              "fullTitle": "列表基本功能测试 contains 函数测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const list = new List();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.append(4);\nassert.equal(list.contains(2), true);\nassert.equal(list.contains(4), true);\nassert.equal(list.contains(6), false);\ndone();",
              "err": {},
              "uuid": "2fef2600-818b-4aed-8029-38bb01ab7054",
              "parentUUID": "97db9698-1a67-4817-a3de-17edab3a6783",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ce8bf06-e055-4aa0-90d1-14a9b215f0a2",
            "09bef4db-ab6f-4f7c-aaec-f48258b5095f",
            "a809f6f2-f408-495d-a87c-23feaa4e7d75",
            "11f69f49-858e-41c6-bb26-8164a124a2c4",
            "fbda5b89-8b36-441e-9fb7-10c9d41fa84d",
            "e3e40a90-dd07-4e1f-ac5d-978a42b6e1a7",
            "2fef2600-818b-4aed-8029-38bb01ab7054"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bcf5a0bd-598f-4ba1-a290-a7fc00c2e92a",
          "title": "栈基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\stack.spec.js",
          "file": "\\tests\\util\\stack.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "栈基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stack = new Stack();\nstack.push(1);\nassert.equal(stack.top, 1);\nstack.push(2);\nassert.equal(stack.top, 2);\nstack.push(3);\nassert.equal(stack.top, 3);\nstack.push(4);\nassert.equal(stack.top, 4);\nassert.equal(stack.peek(), 4);\nstack.pop();\nassert.equal(stack.top, 3);\nassert.equal(stack.peek(), 3);\nstack.pop();\nassert.equal(stack.top, 2);\nassert.equal(stack.peek(), 2);\nstack.clear();\nstack.push(3);\nassert.equal(stack.top, 1);\nassert.equal(stack.peek(), 3);\ndone();",
              "err": {},
              "uuid": "ac704593-fb92-43dc-9b92-6cc0ec137902",
              "parentUUID": "bcf5a0bd-598f-4ba1-a290-a7fc00c2e92a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac704593-fb92-43dc-9b92-6cc0ec137902"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9f2a2d3-8c57-4d18-b4e0-bf2de372830d",
          "title": "队列基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\queue.spec.js",
          "file": "\\tests\\util\\queue.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "队列基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queue = new Queue();\nassert.equal(queue.empty(), true);\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nassert.equal(queue.toString(), \n`1\n2\n3`);\nqueue.dequeue();\nassert.equal(queue.toString(), \n`2\n3`);\nassert.equal(queue.length, 2) \nqueue.enqueue(5);\nassert.equal(queue.front(), 2);\nassert.equal(queue.toString(), \n`2\n3\n5`);\nassert.equal(queue.back(), 5);\nassert.equal(queue.empty(), false);\ndone();",
              "err": {},
              "uuid": "93cfb8b2-6819-41ef-aa18-c114fcbf6028",
              "parentUUID": "e9f2a2d3-8c57-4d18-b4e0-bf2de372830d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93cfb8b2-6819-41ef-aa18-c114fcbf6028"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d34be62c-eb27-4dc3-a3c1-3eed8cd93cbb",
          "title": "链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\listNode.spec.js",
          "file": "\\tests\\util\\listNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nassert.equal(listNode.display(), '1 => 2 => 3 => 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 3 => 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 => 2 => 2.5 => 4');\ndone();",
              "err": {},
              "uuid": "6726029c-da8b-4806-9db9-7571ba4e4490",
              "parentUUID": "d34be62c-eb27-4dc3-a3c1-3eed8cd93cbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6726029c-da8b-4806-9db9-7571ba4e4490"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "48d9a4c1-63f1-47da-acee-a4df7133ba8c",
          "title": "双向链表基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\doubleListNode.spec.js",
          "file": "\\tests\\util\\doubleListNode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "双向链表基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const listNode = new ListNode(1);\nlet node2 = listNode.insert(2, 1);\nlet node3 = listNode.insert(3, 2);\nlet node4 = listNode.insert(4, 3);\nlet node6 = listNode.insert(6, 5);\nassert.equal(listNode.display(), '1 <=> 2 <=> 3 <=> 4');\nassert.equal(listNode.find(3), node3);\nassert.equal(listNode.find(5), false);\nassert.equal(listNode.findPrevious(2), listNode.head);\nassert.equal(listNode.findPrevious(5), false);\nlet node2_5 = listNode.insert(2.5, 2);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 3 <=> 4');\nlistNode.remove(3);\nassert.equal(listNode.display(), '1 <=> 2 <=> 2.5 <=> 4');\nassert.equal(listNode.findNext(2), node2_5);\nassert.equal(listNode.findNext(4), null);\nassert.equal(listNode.findNext(5), false);\ndone();",
              "err": {},
              "uuid": "4137cb68-c28f-44a1-9c5a-c72d9dc66e15",
              "parentUUID": "48d9a4c1-63f1-47da-acee-a4df7133ba8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4137cb68-c28f-44a1-9c5a-c72d9dc66e15"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a870cf88-382a-4730-a35c-3f688a6ebb60",
          "title": "集合基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\set.spec.js",
          "file": "\\tests\\util\\set.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "集合基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const set1 = new Gather([1, 2, 3, 4, 4]);\nconst set2 = new Gather([2, 4, 6, 7]);\nassert.equal(set1.display(), '1,2,3,4');\nlet intersect = Gather.intersect(set1, set2);\nassert.equal(intersect.display(), '2,4');\nlet union = Gather.union(set1, set2);\nassert.equal(union.display(), '1,2,3,4,6,7');\nlet complementary = Gather.complementary(set1, new Gather([1, 2, 3, 4, 5, 6]));\nassert.equal(complementary.display(), '5,6');\nlet difference = Gather.difference(set1, set2);\nassert.equal(difference.display(), '1,3,6,7');\ndone();",
              "err": {},
              "uuid": "ad305187-55d2-48f5-b7ad-1b84dc54a855",
              "parentUUID": "a870cf88-382a-4730-a35c-3f688a6ebb60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad305187-55d2-48f5-b7ad-1b84dc54a855"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "19b82417-20f3-4371-a131-7814228a24e2",
          "title": "二叉树基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\BST.spec.js",
          "file": "\\tests\\util\\BST.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "二叉树基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bst = new BST(50);\nconst node_25 = bst.insert(25);\nbst.insert(15);\nbst.insert(30);\nbst.insert(30);\nbst.insert(35);\nbst.insert(32);\nbst.insert(34);\nconst node_55 = bst.insert(55);\nbst.insert(53);\nbst.insert(54);\nbst.insert(75);\nbst.insert(67);\nbst.insert(70);\nassert.equal(bst.inOrder(), '15,25,30,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.find(50), bst.root);\nassert.equal(bst.find(25), node_25);\nassert.equal(bst.find(55), node_55);\nassert.equal(bst.find(72), false);\nassert.equal(bst.getMin().show(), 15);\nassert.equal(bst.getMax().show(), 75);\nbst.remove(15);\nassert.equal(bst.inOrder(), '25,30,32,34,35,50,53,54,55,67,70,75');\nbst.remove(30);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,55,67,70,75');\nassert.equal(bst.remove(58), false);\nbst.remove(55);\nassert.equal(bst.inOrder(), '25,32,34,35,50,53,54,67,70,75');\nbst.remove(35);\nassert.equal(bst.inOrder(), '25,32,34,50,53,54,67,70,75');\nbst.remove(50);\nassert.equal(bst.inOrder(), '25,32,34,53,54,67,70,75');\ndone();",
              "err": {},
              "uuid": "dcc3bff3-2524-4292-8a1a-2d31c6413344",
              "parentUUID": "19b82417-20f3-4371-a131-7814228a24e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dcc3bff3-2524-4292-8a1a-2d31c6413344"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eec1bd1f-8c73-4e40-9ace-592f49c4cfd8",
          "title": "图基本功能测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\graph.spec.js",
          "file": "\\tests\\util\\graph.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "基本功能测试",
              "fullTitle": "图基本功能测试 基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const graph = new Graph(7);\ngraph.addEdge(0, 1);\ngraph.addEdge(0, 2);\ngraph.addEdge(0, 3);\ngraph.addEdge(1, 4);\ngraph.addEdge(2, 5);\ngraph.addEdge(4, 6);\nlet edgs = [\n\t[1, 2, 3],\n\t[0, 4],\n\t[0, 5],\n\t[0],\n\t[1, 6],\n\t[2],\n\t[4]\n]\nconsole.log(edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.showGraph(), edgs.map((arr, i) => `${i} => ${arr.join(',')}`).join('\\n'));\nassert.equal(graph.dfs(0), '0,1,4,6,2,5,3');\t\t\nassert.equal(graph.bfs(0), '0,1,2,3,4,5,6');\ndone();",
              "err": {},
              "uuid": "45524431-1074-4938-a034-668ebaea233a",
              "parentUUID": "eec1bd1f-8c73-4e40-9ace-592f49c4cfd8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45524431-1074-4938-a034-668ebaea233a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1955d773-b651-469f-8757-c069e6eef401",
          "title": "排序算法测试",
          "fullFile": "D:\\html\\git\\Data_Structure\\tests\\util\\sort.spec.js",
          "file": "\\tests\\util\\sort.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "随机数组基本功能测试",
              "fullTitle": "排序算法测试 随机数组基本功能测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let arr = new randomArr(100);\nassert.equal(arr.length, 100);\nlet allNum = arr.every(item => {\n\treturn typeof item === 'number' && 0 < item && item < 1000;\n});\nassert.equal(allNum, true);\ndone();",
              "err": {},
              "uuid": "d4064af2-2211-456e-8c2c-954ed0aff187",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序基本功能测试",
              "fullTitle": "排序算法测试 冒泡排序基本功能测试",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.bubble();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "cad4b40a-bdcc-44e4-a510-42c13adbe8d7",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "冒泡排序时间测试",
              "fullTitle": "排序算法测试 冒泡排序时间测试",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).selection();\n}\ndone();",
              "err": {},
              "uuid": "519fa22d-2a8d-4a25-8efd-ea67720a29d9",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序基本功能测试",
              "fullTitle": "排序算法测试 选择排序基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.selection();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "2ce4d300-15af-4814-8f9a-7427486c7f77",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序时间测试",
              "fullTitle": "排序算法测试 选择排序时间测试",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).insertion();\n}\ndone();",
              "err": {},
              "uuid": "84fadfaa-dda3-446c-9fe9-b388196d0a61",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序基本功能测试",
              "fullTitle": "排序算法测试 插入排序基本功能测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10;\nwhile (count--) {\n\tlet arr = new randomArr(100);\n\tlet forkArr = Array.from(arr).sort((a, b) => a - b);\n\tarr.insertion();\n\tassert.equal(arr.toString(), forkArr.toString());\n}\ndone();",
              "err": {},
              "uuid": "9dccd1b4-f542-41db-b5ca-82943beb43e6",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序时间测试",
              "fullTitle": "排序算法测试 插入排序时间测试",
              "timedOut": false,
              "duration": 309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let count = 10000;\nwhile (count--) {\n\tnew randomArr(100).bubble();\n}\ndone();",
              "err": {},
              "uuid": "b7d15d7f-6756-44d3-8c03-f07f1d49c62a",
              "parentUUID": "1955d773-b651-469f-8757-c069e6eef401",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4064af2-2211-456e-8c2c-954ed0aff187",
            "cad4b40a-bdcc-44e4-a510-42c13adbe8d7",
            "519fa22d-2a8d-4a25-8efd-ea67720a29d9",
            "2ce4d300-15af-4814-8f9a-7427486c7f77",
            "84fadfaa-dda3-446c-9fe9-b388196d0a61",
            "9dccd1b4-f542-41db-b5ca-82943beb43e6",
            "b7d15d7f-6756-44d3-8c03-f07f1d49c62a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 723,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "./docs/customReportFilename"
      },
      "version": "4.0.1"
    }
  }
}